#!/usr/bin/env python

import os
import argparse
from metis.Utils import make_tarball

def make(output, cmssw_base=None, skip_root=False, exclude_pattern=None, extra_paths=[], use_bz2_algo=False):

    extra = {}
    if cmssw_base:
        if not os.path.exists(cmssw_base):
            raise Exception("That cmssw base directory does not exist!")
            cmssw_base = os.path.abspath(cmssw_base)

    extra = {
            "override_cmssw_base": cmssw_base,
            "exclude_root_files": skip_root,
            "exclude_pattern": exclude_pattern,
            "extra_paths": extra_paths,
            "use_bz2": use_bz2_algo,
            }

    print "[mtarfile] Making tarfile"
    if skip_root:
        print "[mtarfile] Skipping root files"
    if exclude_pattern:
        print "[mtarfile] Skipping paths/files containing \"{}\"".format(exclude_pattern)
    make_tarball(output, **extra)
    print "[mtarfile] Made {0:.1f}MB tarfile: {1}".format(1.e-6*os.path.getsize(output), output)

    return True

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("output", help="name of output tar file")
    parser.add_argument("-c", "--cmssw", help="CMSSW_BASE directory, default is $CMSSW_BASE", default=None)
    parser.add_argument("-n", "--norootfiles", help="don't tar up root files", action="store_true")
    parser.add_argument("-e", "--extrapaths", help="extra files/dirs to include in tarfile", nargs="+")
    parser.add_argument("-x", "--excludepattern", help="str to match to exclude in tarfile", default=None)
    parser.add_argument("-b", "--bz2", help="use bz2 algorithm", action="store_true")

    args = parser.parse_args()

    make(args.output, args.cmssw, args.norootfiles, args.excludepattern, args.extrapaths, args.bz2)
