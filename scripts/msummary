#!/usr/bin/env python

import json
import argparse
import datetime
from metis.Utils import hsv_to_rgb


def is_open_dataset(d_general):
    return d_general["open_dataset"]

def get_progress(d_general, jobs=True):
    which = "njobs" if jobs else "nevents"
    done = d_general.get("{0}_done".format(which), 0)
    total = d_general.get("{0}_total".format(which), 0)
    if not total:
        frac = 0.
    else:
        frac = 1.0 * done / total
    return done, total, frac

def progress_bar(fraction, width=40, do_color=True, do_unicode=True,override_color=[]):
    fraction = min(max(fraction, 0.), 1.)
    nfilled = int(fraction * width)
    color_open, color_close = "", ""
    filled = "#"*nfilled
    unfilled = "-"*(width-nfilled)
    if do_unicode:
        filled = unichr(0x2589).encode('utf-8') * nfilled
        unfilled = unichr(0x2594+24).encode('utf-8')*(width-nfilled)
        # unfilled = unichr(0x2594).encode('utf-8')*(width-nfilled)
        # nleftover_eighths = int((fraction*width-nfilled)*8)
        # if nleftover_eighths > 0:
        #     if nleftover_eighths == 4: nleftover_eighths += 1
        #     filled = filled[:-1]+unichr(0x2590-nleftover_eighths).encode('utf-8')

    if do_color:
        if override_color:
            rgb = override_color
        else:
            rgb = hsv_to_rgb(1.0 / 3.6 * fraction, 0.9, 0.9)
        color_open = "\033[38;2;%i;%i;%im" % tuple(rgb)
        color_close = "\033[0m"
    return "|{0}{1}{2}{3}|".format(color_open,filled, color_close,unfilled)

def main(args):

    web_summary = args.summary
    which_sort = args.sort
    reverse_sort = args.reverse
    verbose = args.verbose
    do_color = not args.nocolor

    with open(web_summary, "r") as fhin:
        data = json.load(fhin)

    if which_sort == "progress":
        data["tasks"] = sorted(data["tasks"], key=lambda x: get_progress(x["general"])[-1], reverse=reverse_sort)
    elif which_sort == "name":
        data["tasks"] = sorted(data["tasks"], key=lambda x: x["general"]["dataset"], reverse=reverse_sort)
    elif which_sort == "era":
        data["tasks"] = sorted(data["tasks"], key=lambda x: x["general"]["dataset"].split("/")[2], reverse=reverse_sort)

    dt = datetime.datetime.fromtimestamp(int(data["last_updated"]))
    if do_color:
        print "\033[93mSummary as of {0}\033[0m".format(dt.strftime("%a %b %d %T %Y"))
    else:
        print "Summary as of {0}".format(dt.strftime("%a %b %d %T %Y"))
    for d_ds in data["tasks"]:
        d_general = d_ds["general"]
        d_bad = d_ds["bad"]
        dataset = d_general["dataset"]

        done, total, fraction = get_progress(d_general)
        is_open = is_open_dataset(d_general)
        if is_open:
            progress =  progress_bar(fraction, override_color=[255,170,59], do_color=do_color)
        else:
            progress =  progress_bar(fraction, do_color=do_color)

        dataset_short = dataset
        dswidth = 45
        if len(dataset) > dswidth:
            dataset_short = dataset[:dswidth-3]+"..."
        print ("{0:<%is} {1} {2:3.0f}%% [{3}/{4}]" % dswidth).format(dataset_short, progress, 100.0*fraction, done, total)

        if verbose:
            for iout,info in d_bad["jobs_not_done"].items():
                nretries = info["retries"]
                last_log = info["last_log"]
                red_open, color_close = "", ""
                if do_color:
                    red_open = "\033[38;2;250;50;50m"
                    color_close = "\033[0m"
                print "\toutput {}: {}{} retries{}, {}".format(iout, red_open, nretries, color_close, last_log)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--summary", help="web summary JSON file", default="web_summary.json")
    parser.add_argument("-c", "--nocolor", help="disable colors", action="store_true")
    parser.add_argument("-s", "--sort", help="sort type: 'progress', 'name', or 'era'", default="progress")
    parser.add_argument("-r", "--reverse", help="reverse sort", action="store_true")
    parser.add_argument("-v", "--verbose", help="verbose (show more details)", action="store_true")

    args = parser.parse_args()

    main(args)
